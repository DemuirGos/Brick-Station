
#[derive(Debug, Clone, PartialEq)]
pub enum Opcode {
    BRK, ORA, ASL, PHP, BPL, 
    CLC, JSR, AND, BIT, ROL, 
    PLP, BMI, SEC, RTI, EOR, 
    LSR, PHA, JMP, BVC, CLI, 
    RTS, ADC, ROR, PLA, BVS, 
    SEI, STA, STY, STX, DEY, 
    TXA, BCC, TYA, TXS, LDY, 
    LDA, LDX, TAY, TAX, BCS, 
    CLV, TSX, CPY, CMP, DEC, 
    INY, DEX, BNE, CLD, NOP, 
    CPX, SBC, INC, INX, BEQ, 
    SED, 
}

impl Opcode {
    pub fn from_str(word: &str) -> Opcode {
        match word {
            "BRK" => Opcode::BRK,
            "ORA" => Opcode::ORA,
            "ASL" => Opcode::ASL,
            "PHP" => Opcode::PHP,
            "BPL" => Opcode::BPL,
            "CLC" => Opcode::CLC,
            "JSR" => Opcode::JSR,
            "AND" => Opcode::AND,
            "BIT" => Opcode::BIT,
            "ROL" => Opcode::ROL,
            "PLP" => Opcode::PLP,
            "BMI" => Opcode::BMI,
            "SEC" => Opcode::SEC,
            "RTI" => Opcode::RTI,
            "EOR" => Opcode::EOR,
            "LSR" => Opcode::LSR,
            "PHA" => Opcode::PHA,
            "JMP" => Opcode::JMP,
            "BVC" => Opcode::BVC,
            "CLI" => Opcode::CLI,
            "RTS" => Opcode::RTS,
            "ADC" => Opcode::ADC,
            "ROR" => Opcode::ROR,
            "PLA" => Opcode::PLA,
            "BVS" => Opcode::BVS,
            "SEI" => Opcode::SEI,
            "STA" => Opcode::STA,
            "STY" => Opcode::STY,
            "STX" => Opcode::STX,
            "DEY" => Opcode::DEY,
            "TXA" => Opcode::TXA,   
            "BCC" => Opcode::BCC,
            "TYA" => Opcode::TYA,
            "TXS" => Opcode::TXS,
            "LDY" => Opcode::LDY,
            "LDA" => Opcode::LDA,
            "LDX" => Opcode::LDX,
            "TAY" => Opcode::TAY,
            "TAX" => Opcode::TAX,
            "BCS" => Opcode::BCS,
            "CLV" => Opcode::CLV,
            "TSX" => Opcode::TSX,
            "CPY" => Opcode::CPY,
            "CMP" => Opcode::CMP,
            "DEC" => Opcode::DEC,
            "INY" => Opcode::INY,
            "DEX" => Opcode::DEX,
            "BNE" => Opcode::BNE,
            "CLD" => Opcode::CLD,
            "NOP" => Opcode::NOP,
            "CPX" => Opcode::CPX,
            "SBC" => Opcode::SBC,
            "INC" => Opcode::INC,
            "INX" => Opcode::INX,
            "BEQ" => Opcode::BEQ,
            "SED" => Opcode::SED,
            _ => panic!("Invalid opcode: {}", word),
        }
    }
}